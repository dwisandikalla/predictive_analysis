# -*- coding: utf-8 -*-
"""Project Predictive Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XQ_spIaupa-1KupVIS4ozF7IhCmrcStA

# Predictive Analysis

Mengimpor library yang diperlukan untuk proyek ini.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV

"""## Load Dataset"""

data = pd.read_csv("https://raw.githubusercontent.com/dwisandikalla/predictive_analysis/refs/heads/main/Healthcare-Diabetes.csv")
data

"""## Exploratory Data Analysis"""

data.info()

# Mengecek duplikasi data
data.duplicated().sum()

"""Apabila dilihat secara seksama di atas, pada data tidak ada yang missing value dan semua type data sudah di sesuai. Saya di bawah menghapus kolom ID (karena kolom tersebut berisikan hanya nomor urut saja).

Memastikan bahwa tidak ada missing value.
"""

data.isna().sum()

# Menghapus kolom id
data.drop('Id', axis=1, inplace=True)

"""Mencari statistika deskriptif untuk setiap kolom."""

data.describe(include="all")

"""Membuat Box-plot untuk setiap kolom yang digunakan untuk mengetahui apakah terdapat outlier atau tidak."""

for column in data.columns:
    plt.figure(figsize=(8, 6))
    sns.boxplot(x=data[column])
    plt.title(f'Boxplot for {column}')
    plt.show()

"""Menghapus baris yang outlier dengan menggunakan metode IQR."""

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1
# Menghapus baris yang mengandung outlier
data = data[~((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)]
data.info()

"""Menampilkan distribusi dari setiap kolom yang ada melalui histogram."""

data.hist(bins=50, figsize=(20,15))
plt.show()

"""Menampilkan pairplot untuk mengetahui korelasi."""

sns.pairplot(data, diag_kind = 'kde')

"""Menampilkan matriks korelasi untuk mengetahui korelasi outcome dengan fitur lainnya agar nampak lebih jelas dari segi pembacaan."""

plt.figure(figsize=(10, 8))
correlation_matrix = data.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix", size=20)

"""## Modeling

### Splitting Data

Splitting data menjadi 80% | 20%
"""

X = data.drop(["Outcome"],axis =1)
y = data["Outcome"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42, stratify = y)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""### Standarisasi

Melakukan standarisasi pada data training dan data testing.
"""

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_train = pd.DataFrame(X_train, columns=X.columns)
X_train

X_test = scaler.transform(X_test)

X_test = pd.DataFrame(X_test, columns=X.columns)
X_test

"""Membuat dataframe untuk menyimpan hasil training dan testing (MSE)."""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'LinearRegression'])

"""### Model KNN"""

knn = KNeighborsRegressor(n_neighbors=2)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""### Model Random Forest"""

rf = RandomForestRegressor(n_estimators=200, max_depth=20, random_state=42, min_samples_split=2)
rf.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=rf.predict(X_train), y_true=y_train)

"""### Model Linear Regression"""

lr = LinearRegression()
lr.fit(X_train, y_train)
models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=lr.predict(X_train), y_true=y_train)

"""## Evaluasi Model

Hasil evaluasi model dengan menggunakan metrik MSE.
"""

# Dataframe untuk hasil evaluasi
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','Random Forest', 'Linear Regression'])

# Algoritma yang digunakan
model_dict = {'KNN': knn, 'Random Forest': rf, 'Linear Regression':lr}

# Menghitung MSE model train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

"""Plot nilai MSE setiap model."""

fig, ax = plt.subplots(figsize=(10, 6))
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""## Prediksi Model

Prediksi model dengan mengambil beberapa data testing
"""

prediksi = X_test.iloc[:5].copy()
pred_dict = {'y_true':y_test[:5]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).astype(float).round(1)

pd.DataFrame(pred_dict)